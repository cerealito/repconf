#!/usr/bin/env python
'''
Created on Jul 9, 2013

@author: saflores
'''

if __name__ == '__main__':
    # explicitly append the ./src directory to the current path.
    # PyDev does this implicitly but it is better to have it explicit
    # this makes the tool work the same in tests and in CLI
    import sys
    import inspect
    from os.path import dirname, abspath, join
    #when in CLI use inspect to locate the source directory
    src_dir = join(dirname(abspath(inspect.getfile(inspect.currentframe()))),'src')
    sys.path.append(src_dir)


from optparse import OptionParser
from os.path import dirname, basename, splitext, join, exists
from os import environ

from replicator.EAReader import EAReader 
from replicator.ExtraFileReader import ExtraFileReader
from replicator.RemoteLister import RemoteLister
from replicator.PlainWriter import PlainWriter
from replicator.RSyncWrapper import RSyncWrapper
from replicator.logger import configureOutput
from xml.parsers.expat import ExpatError


import replicator.constants as constants


import os
import re
import logging
import ConfigParser


class Replicator:
    '''
    main class
    '''

    #######################################################
    def __init__(self):
        self.initializeTmpDir()
        
        config = ConfigParser.ConfigParser()
        config.read(constants.settings_f)
        
        self.host  = config.get('DEFAULT','host')
        self.login = config.get('DEFAULT','login')
        
        ###############################
        # init loggers
        self.logger = logging.getLogger('out')
        
        configureOutput(self.logger, join(constants.tmp_d, 'output.log') )
        
    #######################################################
    def main(self):
        
        usage = "usage: replicate [options] program file.appli"
        myParser = OptionParser(usage)
        
        myParser.add_option("-l",
                            "--local",
                            action="store_true",
                            dest="local",
                            help="use a local file as input instead of downloading from remote filer")
        
        myParser.add_option("-?",
                            "--what",
                            action="store_true",
                            dest="show_available",
                            help="shows available programs")
        
        opts, args = myParser.parse_args()
           
        ###############################
        # If in local mode, just one arg is needed ignore any other args
        if opts.local:
            self.etat_appli_f_name = args[0]
            rsync_filelist_f = self.extractFilesFromAppliXML(self.etat_appli_f_name)
            rsync = RSyncWrapper(self.login, self.host)
            rsync.SyncFilesFrom(rsync_filelist_f, constants.remote_root, constants.local_root)
            # TODO: exit status should reflect the success or failure of the command 
            sys.exit(0)
        
        ###############################
        # show available .appli files in remote file system,
        #then exits, regardless of any other options
        if opts.show_available:
            if len(args) == 0:
                print 'listing known programs'
                
                for k,v in constants.programs.items():
                    print k + ' : ' + v
                 
                print 'try \'./replicate.py <program> -?\' for available .appli files in each program'
                
            if len(args) > 0:
                program_p     = args[0]
                p_dir = constants.programs.get(program_p)
                
                if p_dir == None:
                    print "Do not know about program " + program_p
                    print "Try -? for available programs"
                    sys.exit(-1)
                
                print 'listing available appli files in ' + program_p
                print
                rl = RemoteLister(self.login, self.host)
                rl.ls(p_dir, "appli$")
            
            sys.exit(0)
        
        ###############################
        # Remote mode follows
        if len(args) != 2:
            myParser.error("incorrect number of arguments. Try -h for help")
            # will exit on error.

        ###############
        # If we get here, we are in remote mode: get a fresh etat_appli...
        program_p = args[0]
        self.etat_appli_f_name = args[1]
        
        p_dir = constants.programs.get(program_p)
        
        if p_dir == None:
            print "Do not know about program " + program_p
            print "Try -? for available programs"
            sys.exit(-1)
        
        self.logger.info('getting remote file ' + self.etat_appli_f_name)
        rsync = RSyncWrapper(self.login, self.host)
    
        f_r_src = join(p_dir, self.etat_appli_f_name);
        f_l_dst = constants.local_root + '/' + join(p_dir, basename(self.etat_appli_f_name))
    
        self.logger.debug('full remote source is    :' + f_r_src)
        self.logger.debug('full local destination is:' + f_l_dst)
        
        etat_appli_TMP = rsync.SyncSingleFile(f_r_src, f_l_dst)

        ###############
        # ... if transfer failed there's no use in continuing.
        if not exists(etat_appli_TMP):
            self.self.logger.error("Input appli file could not be obtained from remote filesystem. Check your permissions\n")
            sys.exit(-1)
        ###############
        # Otherwise extract the files from etat_appli and sync
        rsync_filelist_f, extras = self.extractFilesFromAppliXML(etat_appli_TMP, p_dir)
        rsync.SyncFilesFrom(rsync_filelist_f, constants.remote_root, constants.local_root)
        
        if len(extras) > 0 :
            self.logger.info("--")
            rsync_filelist_extras_f = self.extractFilesFromExtras(extras)
            if rsync_filelist_extras_f != None:
                rsync.SyncFilesFrom(rsync_filelist_extras_f, constants.remote_root, constants.local_root)
        
        self.logger.info('--')
        self.logger.info('Done, bye')

    #######################################################
    def extractFilesFromExtras(self, extras):
        print "Processing Applications*.XML files to get scripts..."   
        filesFromAllExtras = []
                 
        ######## read every extra file and add each of its files to the final list     
        for f in extras:    
            try:
                myReader  = ExtraFileReader(f)
                for f in myReader.getFiles():
                    filesFromAllExtras.append(f)
                         
            except ExpatError, e:
                self.logger.error(e)
                self.logger.info("skipping...")
                continue
            except IOError, e:
                self.logger.warning(basename(self.etat_appli_f_name) +\
                                    '  contains  ' + basename(f) + ', but it could not be downloaded')
                self.logger.info("skipping...")


        if len(filesFromAllExtras) > 0:
            ######## generate another tmp file
            myWriter = PlainWriter()
            myWriter.addSources(filesFromAllExtras)
            myWriter.writeTo(constants.rsync_tmp_extras)
            return constants.rsync_tmp_extras
        else:
            return None

            
    #######################################################
    def extractFilesFromAppliXML(self, etat_appli_f, remote_root=None):
        '''
            Takes an XML file that represents a simulation application
            (etat.appli) returns a tuple:
            - the path to a temporary file that contains all the files
            listed in etat_appli_f. The optional string remote_root
            is used to construct the full path of the remote files 
            - an array of EXTRA files to parse
        '''        
        
        if remote_root:
            # apply dirname twice because we want the parent of the parent
            root_dir = dirname(dirname(remote_root))
        else:
            # apply dirname twice because we want the parent of the parent
            root_dir     =  dirname(dirname(etat_appli_f))
    
        f, ext = splitext(basename(etat_appli_f))      
        
        #give user some output
        
        self.logger.info('remote root: ' + root_dir)
        self.logger.info('etat appli : application/' + basename(etat_appli_f))
        
        
        
        try:
            myReader  = EAReader(etat_appli_f)
            mySources = myReader.getFiles(root_dir)
            
            anotherWriter = PlainWriter()
            anotherWriter.addSources(mySources)
            
        except IOError, ioe:
            # most probably etat_appli_f can not be read
            sys.exit(str(ioe))
        except AttributeError, ae:
            #most probably the passed file is not an etat appli
            sys.exit("The input file is not an appropriate etat.appli ")
        
        self.logger.debug("Creating tmp file with " + str(len(mySources)) + " repSrc elements")
        
        #TODO: check for errors
        anotherWriter.writeTo(constants.rsync_tmp)
        
        #### Check if there are any Applications_*.xml files
        extras = []
        for s in mySources:
            if re.match('.*Applications_.*xml$', str(s)) :
                 extras.append(str(s))
        
        return constants.rsync_tmp, extras

        
    #######################################################
    def initializeTmpDir(self):
        '''
        creates tmp dir and default settings for first time use
        '''
        
        if not exists(constants.settings_f):
            
            if not exists(constants.tmp_d):
                os.makedirs(constants.tmp_d, 0775)
                    
            print 'Initializing with default settings ' + constants.settings_f
        
            settings_f = open(constants.settings_f, 'w')
            
            contents = [
                 '# Default settings file for replicate',
                 '# Fill with the proper values      ',
                 '                                   ',
                 '[DEFAULT]',
                 '# the login name to use in the _remote_ location',
                 'login: ' + environ.get('USER'),
                 '# the ip or hostname of the remote rsync server',
                 'host : 195.220.10.144',
                 '\n'
                 ]
            
            for line in contents:
                settings_f.write(line)
                settings_f.write('\n')
                
            settings_f.close()
            sys.exit("Default configuration created in" + constants.settings_f)
    
###############################################################################
if __name__ == '__main__':
    myRepconf = Replicator()
    myRepconf.main()